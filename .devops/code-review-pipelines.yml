# Azure DevOps pipeline to build, check source codes and run tests.
#
# To make Danger JS run on a pull request you need to add the following pipeline
# variable and set it with a GitHub access token (scope public_repo); otherwise
# set its value to 'skip' without marking it secret:
# - DANGER_GITHUB_API_TOKEN
#

variables:
  NODE_VERSION: '16.14.0'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  # Execute agents (jobs) on latest Ubuntu version.
  vmImageNameDefault: 'ubuntu-latest'

# Automatically triggered on PR
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#pr-trigger
trigger:
  - main
  - release-*

pr:
  - '*'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'
    - repository: selfcareCommon
      type: github
      name: pagopa/selfcare-common-frontend
      ref: refs/heads/main
      endpoint: 'io-azure-devops-github-ro'

# Execute agents (jobs) on latest Ubuntu version.
# To change OS for a specific, ovverride "pool" attribute inside the job definition
pool:
  vmImage: '$(vmImageNameDefault)'

stages:
  - stage: Build
    dependsOn: []
    jobs:
      - job: make_build
        steps:
          - template: .devops/azure-templates/setup-yarn-cache.yml@selfcareCommon
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              nodeVersion: $(NODE_VERSION)
          - script: |
              yarn generate
              yarn build
            displayName: 'Build'
  # - stage: Static_analysis
  #   dependsOn: []
  #   jobs:
  #     - job: lint
  #       steps:
  #         - template: .devops/azure-templates/setup-yarn-cache.yml@selfcareCommon
  #         - template: templates/node-job-setup/template.yaml@pagopaCommons
  #           parameters:
  #             nodeVersion: $(NODE_VERSION)
  #         - script: |
  #             yarn lint
  #           displayName: 'Lint'

  #     - job: danger
  #       condition: and(
  #         succeeded(),
  #         ne(variables['DANGER_GITHUB_API_TOKEN'], 'skip')
  #         )
  #       steps:
  #         - template: .devops/azure-templates/setup-yarn-cache.yml@selfcareCommon
  #         - template: templates/node-job-setup/template.yaml@pagopaCommons
  #           parameters:
  #             nodeVersion: $(NODE_VERSION)

  #         - bash: |
  #             yarn danger ci
  #           env:
  #             DANGER_GITHUB_API_TOKEN: '$(DANGER_GITHUB_API_TOKEN)'
  #           displayName: 'Danger CI'

  # B) Run unit tests if there is a push or pull request on any branch.
  # - stage: Test
  #   dependsOn: []
  #   jobs:
  #     - job: unit_tests
  #       steps:
  #         - template: .devops/azure-templates/setup-yarn-cache.yml@selfcareCommon
  #         - template: templates/node-job-setup/template.yaml@pagopaCommons
  #           parameters:
  #             nodeVersion: $(NODE_VERSION)

  #         - script: |
  #             yarn generate
  #             yarn test:coverage --watchAll=false
  #           displayName: 'Unit tests execution'

  - stage: Sonarcloud
    dependsOn: []
    jobs:
      - job: sonarcloud_analysis
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
          - template: .devops/azure-templates/setup-yarn-cache.yml@selfcareCommon

          #          - script:
          #            displayName: 'Generate'

          - script: git branch
            displayName: 'Branch identification'

          - task: SonarCloudPrepare@1
            displayName: 'Prepare SonarCloud analysis configuration'
            inputs:
              SonarCloud: '$(SONARCLOUD_SERVICE_CONN)'
              organization: '$(SONARCLOUD_ORG)'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: '$(SONARCLOUD_PROJECT_KEY)'
              cliProjectName: '$(SONARCLOUD_PROJECT_NAME)'
              cliSources: '.'
              extraProperties: |
                sonar.javascript.file.suffixes=.js,.jsx
                sonar.typescript.file.suffixes=.ts,.tsx
                sonar.sources=src
                sonar.exclusions=**/__tests__/**,**/__mocks__/**,**/locale/**,**/*bootstrap.tsx,**/*consentAndAnalyticsConfiguration.ts,**/*craco.config.js,**/*index.js,**/*reportWebVitals.ts,**/*routes.tsx
                sonar.tests=src
                sonar.test.inclusions=**/__tests__/**
                sonar.testExecutionReportPaths=test-report.xml
                sonar.sourceEncoding=UTF-8
                sonar.verbose=true
                sonar.javascript.lcov.reportPaths=coverage/lcov.info
                sonar.typescript.tsconfigPath=tsconfig.json
                sonar.eslint.reportPaths=eslint-report.json
          - script: |
              yarn generate
              yarn test:coverage --watchAll=false
            displayName: 'Unit tests execution'
          - script: yarn lint
            displayName: 'Lint execution'

          - task: SonarCloudAnalyze@1

          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'
            displayName: 'Publish SonarCloud results on build summary'
